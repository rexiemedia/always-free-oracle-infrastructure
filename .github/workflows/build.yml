name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven (tests + coverage)
        working-directory: ./app
        run: mvn clean verify package -DskipTests=false

      - name: List build artifacts (debug)
        run: ls -lh ./app/target

      - name: Find built JAR/WAR
        id: jar
        run: |
          ARTIFACT=$(ls app/target/*.war app/target/*.jar | grep -v 'sources\|javadoc' | head -n1)
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV

      - name: Upload artifact for next jobs
        uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: ${{ env.ARTIFACT }}

  sonarqube-nexus-deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarQube Analysis
        working-directory: ./app
        run: |
          mvn verify sonar:sonar \
            -Dsonar.projectKey=your-project-key \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Wait for SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate@v1.1.0
        with:
          scanMetadataReportFile: ./app/.scannerwork/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload artifact to Nexus
        run: |
          FILE=$(ls *.war *.jar | head -n1)
          curl -v -u ${{ secrets.NEXUS_USER }}:${{ secrets.NEXUS_PASS }} \
            --upload-file "$FILE" \
            "${{ secrets.NEXUS_URL }}/repository/maven-releases/com/test_app/my-app/1.0.0/$FILE"

      - name: Deploy to Tomcat (VM3) using Ansible
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/deploy-vm3.yml
          directory: .
          inventory: ansible/inventory.ini
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          ANSIBLE_USER: ubuntu
          ANSIBLE_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SONAR_PASSWORD: ${{ secrets.SONAR_PASSWORD }}      # For VM2 Docker Compose
          NEXUS_PASS: ${{ secrets.NEXUS_PASS }}              # If needed in deployment